package com.ecommerce.project.exceptions;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
//custom error handling mechanism
import java.util.HashMap;
import java.util.Map;

//this makes it global exception handler
@RestControllerAdvice
public class MyGlobalExceptionHandler {
//1st->we create a class->methods in this class handles responses generated by all exception


    @ExceptionHandler(MethodArgumentNotValidException.class)
    //this method handle not valid exception
    public ResponseEntity<Map<String,String>> myMethodArgumentNotValidException(MethodArgumentNotValidException e)
    {
        Map<String,String> response = new HashMap<>();
        e.getBindingResult().getAllErrors().forEach(error->{
            String fieldName = ((FieldError)error).getField();
            String message = error.getDefaultMessage();
            response.put(fieldName,message);
        });
        return new ResponseEntity<Map<String,String>>(response, HttpStatus.BAD_REQUEST);

    }

    //custom Exception
    //intercepts all the resource not found exception.
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> myResourceNotFoundException(ResourceNotFoundException e)
    {
String message = e.getMessage();
return new ResponseEntity<>(message , HttpStatus.NOT_FOUND);


    }

    @ExceptionHandler(APIException.class)
    public ResponseEntity<String> myAPIException(APIException e)
    {
        String message = e.getMessage();
        return new ResponseEntity<>(message , HttpStatus.BAD_REQUEST);


    }



}
